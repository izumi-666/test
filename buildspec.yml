version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 16
    commands:
      # 启动 Docker daemon（构建镜像时必须）
      - nohup /usr/local/bin/dockerd-entrypoint.sh &>/tmp/dockerd.log &
      - timeout 15 sh -c "until docker info; do sleep 1; done"
  pre_build:
    commands:
      #登入ECR
      - aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 170973895532.dkr.ecr.ap-northeast-1.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - npm install
      - echo npm install completed on `date`
      - npm run build
      - echo npm run build completed on `date`
      #date命令获取一下日期作为标签
      - TAG=`date "+%Y%m%d%H%M%S"`
      #build镜像(镜像名直接设置成ECR规定的名字)
      - docker build -t 170973895532.dkr.ecr.ap-northeast-1.amazonaws.com/dp-ecr-httpd:$TAG  ./
      - echo docker build completed on `date`
      #推送镜像
      - docker push 170973895532.dkr.ecr.ap-northeast-1.amazonaws.com/dp-ecr-httpd:$TAG
      - echo docker push completed on `date`
  post_build:
    commands:
      - echo Build completed on `date`
      #创建一个在源码根目录中的名为imagedefinitions.json的文件
      #包含ECS Service的容器名，以及更新后要使用的image URi
      #Codepipeline的部署阶段将使用此信息来创建ECS Service引用的task定义的新version，然后它会使用新的task定义更新ECS Service
      #name指定要更新的コンテナ的名字；imageUri指定更新后的镜像Uri
      # %s会被替换成后面的「170973895532.dkr.ecr.ap-northeast-1.amazonaws.com/dp-ecr-httpd:$TAG 」部分。
      - printf '[{"name":"mynginx","imageUri":"%s"}]' 170973895532.dkr.ecr.ap-northeast-1.amazonaws.com/dp-ecr-httpd:$TAG > imagedefinitions.json
      - cat imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
